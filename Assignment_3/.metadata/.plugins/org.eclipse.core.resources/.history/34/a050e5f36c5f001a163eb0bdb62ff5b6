package statement.expression;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

public abstract class Composite extends Expression {
	protected Expression left;
	protected Expression right;
	
	public Composite(Expression left, Expression right){
		this.left = left;
		this.right = right;
	}
	
	public Expression getLeftExpr(){
		return this.left;
	}
	
	public Expression getRightExpr(){
		return this.right;
	}
	
	private boolean noConflict(Map<String,Boolean> left, Map<String,Boolean> right){
		for(String key: left.keySet()){
			if(right.containsKey(key) && right.get(key)!=left.get(key)){
				return false;
			}
		}
		return true;
	} 
	
	protected void crossAppend(	List<Map<String,Boolean>> result, List<Map<String,Boolean>> left, List<Map<String,Boolean>> right){
		for(int i=0; i<left.size();i++){
			for(int j=0; j<right.size();j++){
				if(noConflict(left.get(i), right.get(j))){
					Map<String,Boolean> result = new HashMap<>();
					result.add(lw+","+rw);					
				}
			}
		}		
	}
	
}
