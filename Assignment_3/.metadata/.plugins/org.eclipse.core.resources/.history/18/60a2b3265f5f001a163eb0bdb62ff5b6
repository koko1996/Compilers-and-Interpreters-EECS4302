package statement.expression;

import java.util.ArrayList;
import java.util.List;

public class Conjunction extends Composite {

	public Conjunction(Expression left, Expression right) {
		super(left, right); 
	}
	
	@Override
	public List<String> witness(boolean expected) {
		System.out.println("Witness Conjunction");
		List<String> result = new ArrayList<>();
		List<String> leftList;
		List<String> rightList;
		if(expected == true){
			// left = true && right == true
			leftList = this.left.witness(expected);
			rightList = this.right.witness(expected);
			crossAppend(result, leftList, rightList);
		} else {
			System.out.println("Witness Conjunction Else");
			// expected = false
			// left = false && right == true
			leftList = this.left.witness(expected);
			rightList = this.right.witness(!expected);
			crossAppend(result, leftList, rightList);
			
			// left = false && right == false
			leftList = this.left.witness(expected);
			rightList = this.right.witness(expected);
			crossAppend(result, leftList, rightList);
			
			// left = true && right == false
			leftList = this.left.witness(!expected);
			rightList = this.right.witness(expected);
			crossAppend(result, leftList, rightList);
		}
		return result;
	}

}
